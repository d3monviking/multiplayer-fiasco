// automatically generated by the FlatBuffers compiler, do not modify

package Game;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ClientMessage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ClientMessage getRootAsClientMessage(ByteBuffer _bb) { return getRootAsClientMessage(_bb, new ClientMessage()); }
  public static ClientMessage getRootAsClientMessage(ByteBuffer _bb, ClientMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ClientMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Game.PlayerData selfData() { return selfData(new Game.PlayerData()); }
  public Game.PlayerData selfData(Game.PlayerData obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public boolean playerInput(int j) { int o = __offset(6); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int playerInputLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public BooleanVector playerInputVector() { return playerInputVector(new BooleanVector()); }
  public BooleanVector playerInputVector(BooleanVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer playerInputAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer playerInputInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int sequenceNumber() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createClientMessage(FlatBufferBuilder builder,
      int selfDataOffset,
      int playerInputOffset,
      int sequenceNumber) {
    builder.startTable(3);
    ClientMessage.addSequenceNumber(builder, sequenceNumber);
    ClientMessage.addPlayerInput(builder, playerInputOffset);
    ClientMessage.addSelfData(builder, selfDataOffset);
    return ClientMessage.endClientMessage(builder);
  }

  public static void startClientMessage(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addSelfData(FlatBufferBuilder builder, int selfDataOffset) { builder.addOffset(0, selfDataOffset, 0); }
  public static void addPlayerInput(FlatBufferBuilder builder, int playerInputOffset) { builder.addOffset(1, playerInputOffset, 0); }
  public static int createPlayerInputVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startPlayerInputVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addSequenceNumber(FlatBufferBuilder builder, int sequenceNumber) { builder.addInt(2, sequenceNumber, 0); }
  public static int endClientMessage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ClientMessage get(int j) { return get(new ClientMessage(), j); }
    public ClientMessage get(ClientMessage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

